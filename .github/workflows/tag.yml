name: Tag

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - Major
          - Minor
          - Patch

jobs:
  run-tests:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    permissions:
      contents: read
      security-events: write

  tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Default to 0 if empty
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "current_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          MAJOR=${{ steps.current_version.outputs.major }}
          MINOR=${{ steps.current_version.outputs.minor }}
          PATCH=${{ steps.current_version.outputs.patch }}
          
          VERSION_BUMP="${{ github.event.inputs.version_bump }}"
          
          case "$VERSION_BUMP" in
            Major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            Minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            Patch)
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Invalid version bump type: $VERSION_BUMP"
              exit 1
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.new_version.outputs.new_tag }}"
          
          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG - ${{ github.event.inputs.version_bump }} version bump"
          
          # Push the tag
          git push origin "$NEW_TAG"
          
          echo "✅ Successfully created and pushed tag: $NEW_TAG"

      - name: Summary
        run: |
          echo "## Tag Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Bump Type:** ${{ github.event.inputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Tag:** ${{ steps.current_version.outputs.current_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Tag:** ${{ steps.new_version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests passed and new tag has been created successfully!" >> $GITHUB_STEP_SUMMARY