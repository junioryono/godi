name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    concurrency:
      group: release
      cancel-in-progress: false

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.25.x

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Generate Release Notes
        id: changelog
        run: |
          # Get current and previous tags
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${CURRENT_TAG#v}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")

          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

          # Create release notes for GitHub release
          RELEASE_NOTES="release_notes.md"
          echo "# Release $VERSION" > $RELEASE_NOTES
          echo "" >> $RELEASE_NOTES

          # Collect commits by type
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"%s|%h")
          else
            COMMITS=$(git log $CURRENT_TAG --pretty=format:"%s|%h")
          fi

          # Parse breaking changes
          BREAKING=""
          while IFS='|' read -r msg hash; do
            # Check for breaking changes (commits with ! or BREAKING CHANGE)
            if echo "$msg" | grep -qE '^[a-z]+(\([^)]+\))?!:' || echo "$msg" | grep -q 'BREAKING.CHANGE'; then
              # Extract the actual message after the type
              CLEAN_MSG=$(echo "$msg" | sed -E 's/^[a-z]+(\([^)]+\))?!?: ?//')
              BREAKING="${BREAKING}* ${CLEAN_MSG}\n"
            fi
          done <<< "$COMMITS"

          if [ -n "$BREAKING" ]; then
            echo "## âš  BREAKING CHANGES" >> $RELEASE_NOTES
            echo "" >> $RELEASE_NOTES
            echo -e "$BREAKING" >> $RELEASE_NOTES
            echo "" >> $RELEASE_NOTES
          fi

          # Parse features
          FEATURES=""
          while IFS='|' read -r msg hash; do
            # Check for feature commits
            if echo "$msg" | grep -qE '^feat(\([^)]+\))?:'; then
              # Extract scope and message
              if echo "$msg" | grep -qE '^feat\([^)]+\):'; then
                SCOPE=$(echo "$msg" | sed -E 's/^feat\(([^)]+)\):.*/\1/')
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^feat\([^)]+\): ?//')
                FEATURES="${FEATURES}* **${SCOPE}:** ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              else
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^feat: ?//')
                FEATURES="${FEATURES}* ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              fi
            fi
          done <<< "$COMMITS"

          if [ -n "$FEATURES" ]; then
            echo "## Features" >> $RELEASE_NOTES
            echo "" >> $RELEASE_NOTES
            echo -e "$FEATURES" >> $RELEASE_NOTES
            echo "" >> $RELEASE_NOTES
          fi

          # Parse bug fixes
          FIXES=""
          while IFS='|' read -r msg hash; do
            # Check for fix commits
            if echo "$msg" | grep -qE '^fix(\([^)]+\))?:'; then
              # Extract scope and message
              if echo "$msg" | grep -qE '^fix\([^)]+\):'; then
                SCOPE=$(echo "$msg" | sed -E 's/^fix\(([^)]+)\):.*/\1/')
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^fix\([^)]+\): ?//')
                FIXES="${FIXES}* **${SCOPE}:** ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              else
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^fix: ?//')
                FIXES="${FIXES}* ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              fi
            fi
          done <<< "$COMMITS"

          if [ -n "$FIXES" ]; then
            echo "## Bug Fixes" >> $RELEASE_NOTES
            echo "" >> $RELEASE_NOTES
            echo -e "$FIXES" >> $RELEASE_NOTES
          fi

          # Add commit list
          echo "" >> $RELEASE_NOTES
          echo "## All Changes" >> $RELEASE_NOTES
          echo "" >> $RELEASE_NOTES
          if [ -n "$PREVIOUS_TAG" ]; then
            git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"* %s" >> $RELEASE_NOTES
          else
            git log $CURRENT_TAG --pretty=format:"* %s" >> $RELEASE_NOTES
          fi

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.changelog.outputs.current_tag }}
          name: ${{ steps.changelog.outputs.current_tag }}
          bodyFile: release_notes.md
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.changelog.outputs.current_tag }}
          git push origin release/${{ steps.changelog.outputs.current_tag }}
