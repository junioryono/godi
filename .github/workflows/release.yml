name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    concurrency:
      group: release
      cancel-in-progress: false

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.25.x

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Generate Changelog and Update Version
        id: changelog
        run: |
          # Get current and previous tags
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${CURRENT_TAG#v}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")

          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

          # Initialize changelog if it doesn't exist
          if [ ! -f docs/reference/changelog.md ]; then
            mkdir -p docs/reference
            echo "# Changelog" > docs/reference/changelog.md
            echo "" >> docs/reference/changelog.md
            echo "All notable changes to godi are documented here. This project follows [Semantic Versioning](https://semver.org/) and uses [Conventional Commits](https://www.conventionalcommits.org/) for automatic versioning." >> docs/reference/changelog.md
            echo "" >> docs/reference/changelog.md
          fi

          # Create new changelog entry
          NEW_ENTRY="docs/reference/new_entry.md"
          echo "## [$VERSION](https://github.com/junioryono/godi/compare/$PREVIOUS_TAG...$CURRENT_TAG) ($(date +%Y-%m-%d))" > $NEW_ENTRY
          echo "" >> $NEW_ENTRY
          echo "" >> $NEW_ENTRY

          # Collect commits by type
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"%s|%h")
          else
            COMMITS=$(git log $CURRENT_TAG --pretty=format:"%s|%h")
          fi

          # Parse breaking changes
          BREAKING=""
          while IFS='|' read -r msg hash; do
            # Check for breaking changes (commits with ! or BREAKING CHANGE)
            if echo "$msg" | grep -qE '^[a-z]+(\([^)]+\))?!:' || echo "$msg" | grep -q 'BREAKING.CHANGE'; then
              # Extract the actual message after the type
              CLEAN_MSG=$(echo "$msg" | sed -E 's/^[a-z]+(\([^)]+\))?!?: ?//')
              BREAKING="${BREAKING}* ${CLEAN_MSG}\n"
            fi
          done <<< "$COMMITS"

          if [ -n "$BREAKING" ]; then
            echo "### âš  BREAKING CHANGES" >> $NEW_ENTRY
            echo "" >> $NEW_ENTRY
            echo -e "$BREAKING" >> $NEW_ENTRY
            echo "" >> $NEW_ENTRY
          fi

          # Parse features
          FEATURES=""
          while IFS='|' read -r msg hash; do
            # Check for feature commits
            if echo "$msg" | grep -qE '^feat(\([^)]+\))?:'; then
              # Extract scope and message
              if echo "$msg" | grep -qE '^feat\([^)]+\):'; then
                SCOPE=$(echo "$msg" | sed -E 's/^feat\(([^)]+)\):.*/\1/')
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^feat\([^)]+\): ?//')
                FEATURES="${FEATURES}* **${SCOPE}:** ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              else
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^feat: ?//')
                FEATURES="${FEATURES}* ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              fi
            fi
          done <<< "$COMMITS"

          if [ -n "$FEATURES" ]; then
            echo "### Features" >> $NEW_ENTRY
            echo "" >> $NEW_ENTRY
            echo -e "$FEATURES" >> $NEW_ENTRY
            echo "" >> $NEW_ENTRY
          fi

          # Parse bug fixes
          FIXES=""
          while IFS='|' read -r msg hash; do
            # Check for fix commits
            if echo "$msg" | grep -qE '^fix(\([^)]+\))?:'; then
              # Extract scope and message
              if echo "$msg" | grep -qE '^fix\([^)]+\):'; then
                SCOPE=$(echo "$msg" | sed -E 's/^fix\(([^)]+)\):.*/\1/')
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^fix\([^)]+\): ?//')
                FIXES="${FIXES}* **${SCOPE}:** ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              else
                CLEAN_MSG=$(echo "$msg" | sed -E 's/^fix: ?//')
                FIXES="${FIXES}* ${CLEAN_MSG} ([${hash}](https://github.com/junioryono/godi/commit/${hash}))\n"
              fi
            fi
          done <<< "$COMMITS"

          if [ -n "$FIXES" ]; then
            echo "### Bug Fixes" >> $NEW_ENTRY
            echo "" >> $NEW_ENTRY
            echo -e "$FIXES" >> $NEW_ENTRY
          fi

          # Merge new entry with existing changelog
          # Keep the header (first 4 lines)
          head -n 4 docs/reference/changelog.md > docs/reference/changelog_new.md
          echo "" >> docs/reference/changelog_new.md
          cat $NEW_ENTRY >> docs/reference/changelog_new.md
          # Add the rest of the old changelog (skip the first 4 lines)
          tail -n +5 docs/reference/changelog.md >> docs/reference/changelog_new.md

          mv docs/reference/changelog_new.md docs/reference/changelog.md
          rm $NEW_ENTRY

          # Create release notes for GitHub release
          if [ -n "$PREVIOUS_TAG" ]; then
            git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"* %s" > release_notes.md
          else
            git log $CURRENT_TAG --pretty=format:"* %s" > release_notes.md
          fi

      - name: Commit and push changes
        run: |
          git add docs/reference/changelog.md
          git commit -m "chore(release): ${{ steps.changelog.outputs.current_tag }} [skip ci]

          - Update changelog"

          git push origin HEAD:main

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.changelog.outputs.current_tag }}
          name: ${{ steps.changelog.outputs.current_tag }}
          bodyFile: release_notes.md
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.changelog.outputs.current_tag }}
          git push origin release/${{ steps.changelog.outputs.current_tag }}
